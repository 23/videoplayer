<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="load();" backgroundColor="black" xmlns:com="com.*" width="100%" height="100%"  preloader="Preloader" verticalScrollPolicy="off" horizontalScrollPolicy="off">
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.formatters.SwitchSymbolFormatter;
			import com.PlayListEvent;
			import com.PlayList;
			import mx.events.VideoEvent;
			import mx.controls.Alert;
			import flash.display.StageDisplayState;
			import com.philemonworks.flex.util.HashCollection;
			import flash.system.Capabilities;
			import mx.core.mx_internal;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'reference.dev.visualtube.net';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			
			private var handleTimer : Timer;
			private var descTimer : Timer;
			
			private var playList : PlayList;
			[Bindable] private var positionChange : Number = -100;
			private var trayOut : Boolean = false;
			[Bindable] private var showPlayList: Boolean = true;
			[Bindable] private var playListOut: Boolean = true;	
			private var offset : Number = 0;
			private var bounds : Object;
			
			[Bindable] private var rightPanelWidth:Number = 0;
			
			private var pos3: Number;
			private var pos2: Number;
			private var pos1: Number;

			private var appAspectRatio:Number = 1;
			private var context:Object = {};
						
			public function displayError(text:String):void {logo.visible=false; video.visible=false; image.visible=false; tray.visible=false; loading.visible=true; loading.text=text;}
			public function formatTime(time:int):String {return(Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString());}
					
			public function recalcBindPositions():void {
				Application.application.updateDisplayList(0,0);
   			}

			public function load():void {
				var domain:String = URLUtil.getServerName(Application.application.url);
				if(domain=='localhost') domain=defaultDomain;
				doJSON('http://' + domain + '/js/video-settings?raw', function(o:Object):void{
					initProperties(o.settings);
					initActiveElement();
					doJSON((props.get('jsonSource') as String), function(o:Object):void{context=o; build();});
				});
			}
			public function build():void {
				if(context && context.photos && context.photos.length>0) {
					if(context.photos.length==1) {
						showPlayList = false;
					} else {	
						showPlayList = true;
						createPlayList();
						setProperties();
					}					

					setActiveElement(0);
					loading.visible=false;
					video.mx_internal::videoPlayer.smoothing = true;
					toggleInfo('newclip');
					this.addEventListener(MouseEvent.ROLL_OUT, onAppMouseOut);
					this.addEventListener(MouseEvent.ROLL_OVER, onAppMouseOver);
				} else {
					displayError('Nothing to show...');
				}
			}
			
			private function setProperties():void {
				pos3 = this.height - tray.height;
				pos2 = this.height - tray.height + 100;
				pos1 = this.height + tray.height;
			}
			
			private function doStateChange(evt:VideoEvent):void {
                switch (evt.currentTarget.state) {
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
            
            private function createPlayList():void  {
            	trace("create playlist");
            	playList = new PlayList();
            	playList.width = tray.width;
            	playList.verticalScrollPolicy = "off";
				playList.itemArray = createItemsArray();
				playList.addEventListener(PlayListEvent.SELECT_ITEM, function(evt:PlayListEvent):void {
            			createTimer();
            			if(evt.itemID != -1) {
		            		toggleInfo('newclip');
        		    		setElementByID(evt.itemID);
            			}
            		});
				playListHolder.addChild(playList);
            }
            
            private function createTimer():void {
            	if(handleTimer != undefined) handleTimer.stop();
            	handleTimer = new Timer(1000,5);
            	handleTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimeOut);
            	handleTimer.addEventListener(TimerEvent.TIMER, onTick);
            	handleTimer.start();
            }
            
            private function onTick(evt:TimerEvent):void {}
            
            private function onTimeOut(evt:TimerEvent):void {
            	trace("time is up");
	            handleTimer.stop();
	            togglePlayList();
            }
            
            private function toggleInfo(context:String):void {
            	if(!activeElement.get('hasInfo')) {
            		trace('no information');
            		descriptions.visible = false;
            		return;	
            	}
            	if(!descriptions.visible ||Â context=='newclip') {
	            	descriptions.visible = true;
	            	if (context!='button') {
	            		if(descTimer != undefined) descTimer.stop();
	            		descTimer = new Timer(1000,5);
	            		descTimer.addEventListener(TimerEvent.TIMER_COMPLETE , function(){
	            				descriptions.visible = false;
            					descTimer.stop();
	            			});
	            		descTimer.start();
	            	}
	            } else {
	            	descriptions.visible = false;
	            	if(descTimer != undefined) descTimer.stop();       		
	            }
            }
            
            private function togglePlayList():void {
            	if(playListOut) {
            		playListOut = false;
            		trayHider.end();
            		positionChange = 0;
            		trayHider.yFrom = this.height - tray.height + 100;
	            	trayHider.yTo = this.height - tray.height;;
	            	trayHider.play();
            		createTimer();
            		trace("Not playListOut: "+positionChange);
            	} else {
            		if(handleTimer != undefined) handleTimer.stop();
            		playListOut = true;
            		trayHider.end();
            		positionChange = -100;
            		trayHider.yFrom = this.height - tray.height;;
	            	trayHider.yTo = this.height - tray.height + 100;
	            	trayHider.play();
	            	trace("playListOut: "+positionChange);
            	}
            }
 
            private function onAppMouseOut(event:MouseEvent):void {
            	if(handleTimer != undefined) handleTimer.stop();
            	if(context && context.photos && context.photos.length == 1) {
            		playListOut = true;
            		trayOut = true;
		           	trayHider.end();
		           	trayHider.yFrom = this.height - tray.height + 100;
	            	trayHider.yTo = this.height + tray.height;
	            	positionChange = - tray.height;
	            	trayHider.play();
            	} else if(context.photos.length > 1) {
            		trayHider.end();
            		if(playListOut) {
            			if(handleTimer != undefined) handleTimer.stop();
	       		    	trayHider.yFrom = this.height - tray.height + 100;
            		} else if(!playListOut) {
            			trayHider.yFrom = this.height - tray.height;;
            			if(handleTimer != undefined) handleTimer.stop();
            		}
            		playListOut = true;
            		trayOut = true;
	            	trayHider.yTo = this.height + tray.height;
	            	positionChange = - tray.height;
	            	trayHider.play();
            	}
            	trace("onAppMouseOut: "+positionChange);
            }
            
            private function onAppMouseOver(event:MouseEvent):void {
//            	if(trayOut) {
            		trayOut = false;
				  	trayHider.end();
				  	trayHider.yFrom = this.height + tray.height;
			        trayHider.yTo = this.height - tray.height + 100;
            		positionChange = - 100;
			       	trayHider.play();
			       	trace("onAppMouseOver: "+positionChange);
//            	}
            }       
            
            private function onVideoPlayHeadUpdate():void {
            	videoPlayProgress.width  = video.playheadTime/video.totalTime*videoProgress.width;
				videoTime.x = videoProgress.x + video.playheadTime/video.totalTime*videoProgress.width - videoTime.width/2;
            }
            
            private function onButtonMouseOver(e:Event):void {
            	e.currentTarget.setStyle('backgroundAlpha', 1);
            	e.currentTarget.getChildren()[0].alpha = 1;         	
            }
            private function onButtonMouseOut(e:Event):void {
            	e.currentTarget.setStyle('backgroundAlpha', props.get('trayAlpha'));
            	e.currentTarget.getChildren()[0].alpha = 0.7;
            }
            private function seekVideoTo(time:int):void {
            	if(!video.playing) playVideoElement();
            	if(!video.totalTime || time>video.totalTime) return;
            	if(video.playing) video.playheadTime = time;
            }
		]]>
	</mx:Script>	
	
	<mx:Move id="trayHider" target="{tray}"/>
	
	<mx:Box id="background" backgroundColor="{(StyleManager.getColorName(props.get('backgroundColor')) as Number)}" width="100%" height="100%" verticalCenter="0" horizontalCenter="0"/>
	<mx:Label id="loading" text="Loading..." color="{(StyleManager.getColorName(props.get('loadingColor')) as Number)}" />
	
	<!-- Image and Video -->
	<mx:VideoDisplay id="video" source="{activeElement.get('videoSource')}" autoRewind="false"  maintainAspectRatio="false"  autoPlay="false" volume="1" horizontalCenter="0" verticalCenter="0" 
		width="{(Application.application.width/Application.application.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : Application.application.width)}"
		height="{(Application.application.width/Application.application.height>activeElement.get('aspectRatio') ? Application.application.height : Application.application.width/(activeElement.get('aspectRatio') as Number))}"
		click="if(video.playing) pauseVideoElement(); else playVideoElement();" stateChange="doStateChange(event);"
		playheadUpdate="{onVideoPlayHeadUpdate()}"
		/>
	<mx:Image id="image" source="{activeElement.get('photoSource')}" width="{video.width}" height="{video.height}" horizontalCenter="0" verticalCenter="0"	click="{playVideoElement()}" />

	<!-- Icon/Logo -->
	<mx:Box id="logo" visible="{(props.get('showLogo') as Boolean)}" top="15" right="15" left="15" bottom="15" horizontalAlign="{props.get('logoAlign')}" verticalAlign="{props.get('logoVAlign')}" horizontalCenter="0" verticalCenter="0">
		<mx:Image source="{props.get('logoSource')}" alpha="{(props.get('logoAlpha') as Number)}" maxWidth="{(props.get('logoWidth') as Number)}" maxHeight="{(props.get('logoHeight') as Number)}" horizontalAlign="{props.get('logoAlign')}" verticalAlign="{props.get('logoVAlign')}"/> 
	</mx:Box>

	<!-- Tray -->
	<mx:Canvas id="tray" bottom="{positionChange}" left="0" right="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="true" horizontalCenter="0">
		<mx:VBox verticalGap="0">
			<mx:VBox id="descriptions" horizontalScrollPolicy="off" verticalScrollPolicy="off" fontAntiAliasType="advanced" fontSharpness="-300" fontFamily="{props.get('trayFont')}" color="{(StyleManager.getColorName(props.get('trayTextColor')) as Number)}" visible="{(props.get('showDescriptions') as Boolean)}" paddingLeft="3" paddingRight="3" width="{tray.width}">
				<!-- Title and Words -->
				<mx:Box id="descBg" horizontalCenter="0" verticalCenter="0" verticalGap="0" backgroundColor="0x000000" backgroundAlpha="{(props.get('trayAlpha') as Number)}" cornerRadius="3" borderStyle="solid" borderThickness="0" width="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6">
					<mx:Label id="trayTitle" fontSize="{(props.get('trayTitleFontSize') as Number)}" fontWeight="{props.get('trayTitleFontWeight')}" text="{activeElement.get('title')}" truncateToFit="true" maxWidth="{Application.application.width}" updateComplete="trayTitle.visible = (trayTitle.text.length>0);" width="{descBg.width - 15}"/>
					<mx:Text id="trayContent" fontSize="{(props.get('trayContentFontSize') as Number)}" fontWeight="{props.get('trayContentFontWeight')}" text="{activeElement.get('content')}" truncateToFit="true" maxWidth="{Application.application.width}" updateComplete="trayContent.visible = (trayContent.text.length>0);" height="{(props.get('trayContentFontSize') as Number)*2.6}" width="{descBg.width - 15}"/>
				</mx:Box>
			</mx:VBox>
			
			<mx:HBox id="controlBox">
				<mx:Canvas width="{tray.width}">
				
					<!-- Play and Pause --> 
					<mx:HBox visible="true" id="videoControls" bottom="3" top="3" left="3" width="{playImage.width}" resize="recalcBindPositions()">
			    		<mx:Canvas id="playImage" includeInLayout="{playImage.visible}" width="30" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			visible="{!video.playing}"  
			    			click="playVideoElement()">
			    			<mx:Image source="@Embed(source='assets/buttons/play.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="pauseImage" includeInLayout="{pauseImage.visible}" width="30" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			visible="{video.playing}"  
			    			click="pauseVideoElement()">
			    			<mx:Image source="@Embed(source='assets/buttons/pause.swf')" alpha="0.7"/>
						</mx:Canvas>
			    	</mx:HBox>					
						
					<!-- Elements for progress bar -->
					<mx:Canvas id="progressBg" visible="{videoControls.visible}" click="seekVideoTo((progressBg.contentMouseX-5)/videoProgress.width*video.totalTime);" mouseOver="videoTime.visible=true" mouseOut="videoTime.visible=false" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" backgroundAlpha="{(props.get('trayAlpha') as Number)}" left="{videoControls.width+6}" right="{rightPanel.width+6}" height="{playImage.height}" top="3" cornerRadius="3" borderStyle="solid" borderThickness="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<!-- VideoProgress -->
						<mx:Canvas id="videoProgress" left="5" right="5" height="6" backgroundColor="0xCCCCCC" backgroundAlpha="0.6" bottom="{(progressBg.height-6)/2}">
							<mx:Canvas id="videoBufferProgress" left="0" width="{video.bytesLoaded/video.bytesTotal*videoProgress.width}" height="6" backgroundColor="white" backgroundAlpha="0.2"></mx:Canvas>
							<mx:Canvas id="videoPlayProgress" left="0" height="6" backgroundColor="black" backgroundAlpha="0.6"></mx:Canvas>
						</mx:Canvas>					
						<!-- videoTime -->
						<mx:HBox id="videoTime" visible="false" y="{(progressBg.height-videoTime.height)/2}" backgroundColor="0xFFFFFF" cornerRadius="3" borderStyle="solid" borderColor="0xFFFFFF">
							<mx:Label selectable="false" fontGridFitType="none" fontAntiAliasType="advanced" fontSharpness="-100" text="{formatTime(video.playheadTime)}" fontFamily="Arial" fontWeight="bold" fontSize="8" height="13" color="0x000000"/>
						</mx:HBox>
					</mx:Canvas>					

					<!-- Right Panel -->
			    	<mx:HBox id="rightPanel" visible="true" bottom="3" top="3" right="3" horizontalGap="3" resize="recalcBindPositions()"> 
			    		<!-- PlayListBtn -->
			    		<mx:Canvas id="playlistBtn" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			visible="{showPlayList &amp;&amp; playListOut}" includeInLayout="{showPlayList &amp;&amp; playListOut}" 
			    			click="togglePlayList()">
			    			<mx:Image source="@Embed(source='assets/buttons/expand-off.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="playlistBtnOn" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{showPlayList &amp;&amp; !playListOut}" includeInLayout="{showPlayList &amp;&amp; !playListOut}" 
			    			click="togglePlayList()">
			    			<mx:Image source="@Embed(source='assets/buttons/expand-on.swf')" alpha="0.7"/>
						</mx:Canvas>

					    <!-- HDbutton-->
			    		<mx:Canvas id="hdBtn" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{(activeElement.get('hasHD') as Boolean) &amp;&amp; !playHD}" includeInLayout="{(activeElement.get('hasHD') as Boolean) &amp;&amp; !playHD}"
			    			click="playHD=true; setActiveElement(currentElementIndex, true)">
			    			<mx:Image source="@Embed(source='assets/buttons/hd-on.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="hdOffBtn" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{(activeElement.get('hasHD') as Boolean) &amp;&amp; playHD}" includeInLayout="{(activeElement.get('hasHD') as Boolean) &amp;&amp; playHD}"
			    			click="playHD=false; setActiveElement(currentElementIndex, true)">
			    			<mx:Image source="@Embed(source='assets/buttons/hd-off.swf')" alpha="0.7"/>
						</mx:Canvas>

			    		<!-- InfoBtn -->
			    		<mx:Canvas id="infoImage" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{(activeElement.get('hasInfo') as Boolean)}" includeInLayout="{(activeElement.get('hasInfo') as Boolean)}"
			    			click="toggleInfo('button');">
			    			<mx:Image source="@Embed(source='assets/buttons/info.swf')" alpha="0.7"/>
						</mx:Canvas>

						<!-- Mute and Unmute -->
			    		<mx:Canvas id="muteImage" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{video.volume>0}" includeInLayout="{video.volume>0}"
			    			click="video.volume=0">
			    			<mx:Image source="@Embed(source='assets/buttons/mute-off.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="unmuteImage" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{video.volume==0}" includeInLayout="{video.volume==0}"
			    			click="video.volume=1">
			    			<mx:Image source="@Embed(source='assets/buttons/mute-on.swf')" alpha="0.7"/>
						</mx:Canvas>

						<!-- Fullscreen -->
			    		<mx:Canvas id="fullscreenImage" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{!inFullScreen}" includeInLayout="{!inFullScreen}"
			    			click="toggleFullScreen()">
			    			<mx:Image source="@Embed(source='assets/buttons/fullscreen-on.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="smallscreenImage" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{inFullScreen}" includeInLayout="{inFullScreen}"
			    			click="toggleFullScreen()">
			    			<mx:Image source="@Embed(source='assets/buttons/fullscreen-off.swf')" alpha="0.7"/>
						</mx:Canvas>

						<!-- FeedPanel -->
			    		<mx:Canvas id="feedpanelBtn" includeInLayout="{feedpanelBtn.visible}" width="32" height="28" backgroundColor="black" backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="3" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			click="embedPanel.visible=!embedPanel.visible;">
			    			<mx:Image source="@Embed(source='assets/buttons/share.swf')" alpha="0.7"/>
						</mx:Canvas>

					</mx:HBox>
				</mx:Canvas>
			</mx:HBox>
			
			<!-- PlayList -->
			<mx:HBox height="100" width="{tray.width}" id="playListBox"><mx:Canvas id="playListHolder" bottom="0"/></mx:HBox>					
		</mx:VBox>	
	</mx:Canvas>
	<com:EmbedPanel id="embedPanel" visible="false" includeInLayout="false" verticalCenter="0" horizontalCenter="0" width="100%" height="100%" backgroundColor="0x000000" backgroundAlpha="{(props.get('trayAlpha') as Number)}"/>
</mx:Application>
