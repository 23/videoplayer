<?xml version="1.0" encoding="utf-8"?>
<!-- 
  DBU Player for 23 Video
  Benjamin Bernhard, benjamin@23company.com
  Steffen Tiedemann Christensen, steffen@23company.com
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:com="com.*" 
	layout="absolute" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	preloader="preload.CustomPreloader" 
	backgroundColor="#323031" 
	width="100%" 
	height="100%" 
	creationComplete="init();" 
	keyDown="trayShow()"
	>
	<mx:Style>
		@font-face {
			src:url("assets/buttons/TheSansOT6.otf");
			fontFamily: TheSans;
			advancedAntiAliasing: true;
		}		
		Application {
			fontFamily: TheSans;
		}
	</mx:Style> 	
	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="Identity.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Script>
		<![CDATA[
			import com.PlayList;
			import com.PlayListEvent;
			import com.PlayerButton;
			import com.SmoothImage;
			import com.adobe.serialization.json.JSONParseError;
			import com.philemonworks.flex.util.HashCollection;

			import flash.display.StageDisplayState;
			import flash.external.ExternalInterface;
			
			import mx.controls.Alert;
			import mx.core.mx_internal;
			import mx.events.VideoEvent;

			import com.GuN.UI.customUIComponent.slider.SliderTrack;
			import com.GuN.UI.customUIComponent.slider.CSpSliderThumb;

			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'video.dbu.dk';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';
			private var playerId:String = '0';

			private var context:Object = {};
			private var recommendations:Object = {};
			
			private var playList: PlayList;
			[Bindable] private var enablePlayList: Boolean = false;		
			[Bindable] private var showPlayList: Boolean = false;
			[Bindable] private var cleanVideoState:String = 'paused';
			
			public function init():void {
				prepareTimers();
				flash.system.Security.allowDomain('*');
				try {
					var objectID:String = new String(ExternalInterface.objectID);
					if (ExternalInterface.available && (objectID.length>0 && objectID!='null')) {
						ExternalInterface.addCallback('unloadVideoPlayer', function():void {unload();});
						ExternalInterface.addCallback('pauseVideo', function():void {pauseVideoElement();});
						ExternalInterface.addCallback('playVideo', function():void {playVideoElement();});
						ExternalInterface.addCallback('getPlayState', function():String {return(cleanVideoState);});
						ExternalInterface.addCallback('getPlayheadTime', function():Object {return(video.playheadTime + activeElement.getNumber('start'));});
						ExternalInterface.addCallback('setPlayheadTime', function(time:int):void {progress.seekVideoTo(time);});
						ExternalInterface.addCallback('getTotalTime', function():Object {return(video.totalTime);});
						ExternalInterface.addCallback('getCurrentPhotoID', function():Object {return(activeElement.get('photo_id'));});
						ExternalInterface.addCallback('getJSONSource', function():Object {return(props.get('jsonSource'));});
						ExternalInterface.addCallback('echo', function(x:Object):Object {return(x);});
					}
		        } catch (e:SecurityError) {} catch(e:Error) {}
				load();
			}
			var voted:Boolean = false;
			public function vote():void {
				if(voted) return;
				voted = true;
				try {
					activeElement.put('number_of_ratings', 1 + new Number(activeElement.get('number_of_ratings')));
					var req:URLRequest = new URLRequest('http://' + props.get('domain') + '/actions?action=photo-rate&photo_id=' + activeElement.get('photo_id') + '&rating=1&num_units=1');
					var loader:URLLoader = new URLLoader();
					loader.load(req);
				} catch(e:Error){}
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				try {if(video.playing) video.pause();} catch(e:Error){}
				try {if(video.playing) reportPlay('end', video.playheadTime)} catch(e:Error){}
			}
			public function load():void {
				var domain:String = URLUtil.getServerName(FlexGlobals.topLevelApplication.url);
				if(domain=='localhost' || domain=='') domain=defaultDomain;
				
				// Are we using a specific player, or just the default? (if so, we want to specify the player id to get the correct video settings)
				var testCustomPlayer:Array = new RegExp('/([0-9]+)\.swf').exec(FlexGlobals.topLevelApplication.url);
				if (testCustomPlayer && testCustomPlayer.length>1) playerId = testCustomPlayer[1]; 
				
				// Mash up embed parameters, including .swf?..., Flashvars, width and height to get a good embed code   
				var a:Array = []; var v:String;
				for (v in FlexGlobals.topLevelApplication.parameters) {a.push(encodeURIComponent(v) + '=' + encodeURIComponent(FlexGlobals.topLevelApplication.parameters[v]));}
				a.push('width=' + encodeURIComponent(FlexGlobals.topLevelApplication.width));
				a.push('height=' + encodeURIComponent(FlexGlobals.topLevelApplication.height));
				
				// Get settings for this player from 23 Video
				var settings_endpoint:String = 'http://' + domain + '/js/video-settings?raw&parameters=' + encodeURIComponent(a.join('&')) + (playerId ? '&player_id=' + playerId : '');
				doJSON(settings_endpoint, function(o:Object):void{
					initProperties(o.settings);
					initActiveElement();
					doJSON((props.get('jsonSource') as String), function(o:Object):void{context=o; build();});
				});
			}
			public function build():void {
				if(!context || !context.photos || context.photos.length==0) {displayError('Empty video stream...'); return;}
				video.mx_internal::videoPlayer.smoothing = true;
				identityVideo.mx_internal::videoPlayer.smoothing = true;
				setActiveElement(0, false, props.getNumber('start'));

				if (props.get('showTray') && props.get('showBrowse')) {
					// Generate the recommendation playlist
					var recommendationSource:String = getRecommendationSource();
					if(recommendationSource==props.get('jsonSource')) {
						// The list displays all the items in the feed
						recommendations=context; createPlayList();
					} else {
						// The list consists of recommendations, we'll need to load them 
						try {
							doJSON(recommendationSource, function(o:Object):void{recommendations=o; createPlayList();});
						} catch(e:JSONParseError) {enablePlayList = false; props.put('showShare', false);}
					}
				}
			}
			private function createPlayList():void  {
				var arr:Array = createItemsArray(recommendations);
				if(arr.length<=1) return;
				enablePlayList = true;
				playListHolder.removeAllChildren(); // if we've done this before, clean up after ourselves.
				playList = new PlayList();
				playList.width = playListContainer.width;
				playList.verticalScrollPolicy = "off";
				playList.itemArray = arr;
				playList.addEventListener(PlayListEvent.SELECT_ITEM, function(evt:PlayListEvent):void {
					// When clicking the recommendation playlist, we shift context -- it's no longer the initially selected video, but the playlist objects
					context = recommendations;
					if(evt.itemID>=0) {
						playListHide();
						setElementByID(evt.itemID, true); 
					}
				});
				playListHolder.addChild(playList);
				
				if(props.get('browseMode')) {
					showPlayList = true;
					trayShow();
				}
			}
			private function playListShow():void {
				if (!props.get('showTray') || !props.get('showBrowse')) return;
				showPlayList = true;
			}
			private function playListHide():void {
				showPlayList = false;
			}
			
            private function trayShow():void {
				if(embedPanel.visible) {tray.visible=false; return;}
            	if(!props.get('showTray')) {tray.visible=false; return;}
            	trayTimer.reset(); trayTimer.start();
            	tray.visible = true;
            }            
            private function trayHide():void {
				if (showPlayList) return;
            	trayTimer.stop();
            	if(props.getNumber('trayTimeout')<=0) return;
                tray.visible = false;
            }            
			private var trayTimer:Timer = new Timer(1500,1);
            private function prepareTimers():void {
            	// TRAY AND POSSIBLY PLAYLIST
            	// Hide when the timer completes
				trayTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function():void {trayHide();});
				// Reset timer when the mouse moves in the application
				FlexGlobals.topLevelApplication.addEventListener(MouseEvent.MOUSE_MOVE, function():void {trayShow();});
            }             
			private function onPlayListDone():void {
				if(props.get('loop')) { 
					load();
				} else {
					if (playList) {
						playListShow();
						trayShow();
					}
				}
			}
			private function onVideoStateChange(evt:VideoEvent):void {
				// Flex VideoDisplay shows weird stuff during seek; to avoid this,
				// we show a bitmap snapshot from the video during seek and wait for playing
				if (evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					var bmData:BitmapData = new BitmapData(video.width, video.height);  
					bmData.draw(video as DisplayObject);  
					var bm:Bitmap = new Bitmap(bmData);  
					videoShadow.source = bm;
				} else if (evt.currentTarget.state==VideoEvent.LOADING) {
					videoShadow.visible = true;
				} else if (evt.currentTarget.state==VideoEvent.PLAYING) {
					videoShadow.visible = false;
				}
				
				if(evt.currentTarget.state==VideoEvent.PLAYING || evt.currentTarget.state==VideoEvent.SEEKING) {
					cleanVideoState = 'playing';
					trayHide();
				} else if(evt.currentTarget.state==VideoEvent.LOADING || evt.currentTarget.state==VideoEvent.BUFFERING) {
					cleanVideoState = 'buffering';
				} else if(evt.currentTarget.state==VideoEvent.DISCONNECTED || evt.currentTarget.state==VideoEvent.COMPLETE || evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					cleanVideoState = 'paused';
				}
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
						reportPlay('end', video.playheadTime);
						break;
                	case VideoEvent.PLAYING:
						reportPlay('start', video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
            private function onVideoComplete(ignoreIdentity:Boolean=false):void {
				reportPlay('end', video.playheadTime);
     			if(!ignoreIdentity) return(handleIdentity('after', function():void {onVideoComplete(true);}));
            	if(props.get('loop')) {
            		var more:Boolean = nextElement();
					if(!more) onPlayListDone();
				} else {
					onPlayListDone();
            	}
            }
			private function onPlayListResize():void {
				var c:Array = playListHolder.getChildren();
				if (c.length) c[0].width = playListContainer.width;
			}
            private function onTrayResize():void {
            	if(tray.visible) trayShow(); // if the tray is displayed and changes size, force a replacement
            	resizeProgressBar();
            }
            private function resizeProgressBar():void {
            	progress.x = 0; 
            	progress.width = tray.width; 
            }
		]]>
	</mx:Script>	
	
	<!-- Simple element to provide a backdrop when everything else fails -->
	<mx:Box id="background" 
		backgroundColor="{(styleManager.getColorName(props.get('backgroundColor')) as Number)}" 
		width="100%" 
		height="100%" 
		verticalCenter="0" 
		horizontalCenter="0"
		/>
	<mx:Label id="errorContainer" 
		color="white"
		/>
	
	<mx:Canvas id="contentContainer"
		x="{props.getNumber('horizontalPadding')/2}"
		y="0"
		width="{FlexGlobals.topLevelApplication.width-props.getNumber('horizontalPadding')}"
		height="{FlexGlobals.topLevelApplication.height-props.getNumber('verticalPadding')}"
		>
	<!-- Image and Video -->
	<mx:VideoDisplay id="video" 
		autoRewind="false"  
		maintainAspectRatio="false"  
		autoPlay="false" 
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="2"
		backgroundColor="#323031"
		width="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : contentContainer.width)}"
		height="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? contentContainer.height : contentContainer.width/(activeElement.get('aspectRatio') as Number))}"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();" 
		stateChange="onVideoStateChange(event);"
		complete="onVideoComplete();"
		/>
	<com:SmoothImage id="videoShadow" 
		horizontalCenter="0" 
		verticalCenter="0"
		width="{video.width}"
		height="{video.height}"
		includeInLayout="{videoShadow.visible}"
		/> 
	<com:SmoothImage id="image" 
		source="{activeElement.get('photoSource')}" 
		width="{video.width}" 
		height="{video.height}" 
		horizontalCenter="0" 
		verticalCenter="0"
		click="{playListHide(); playVideoElement()}" 
		/>
 
	<!-- Extra displays for identity video and photo -->
	<mx:VideoDisplay id="identityVideo" 
		visible="false" 
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="2" 
		width="{video.width}" 
		height="{video.height}"
		maintainAspectRatio="{props.get('maintainIdentityAspectRatio')}"
		buttonMode="true"
		playheadUpdate="{var secs:int=Math.round(identityVideo.totalTime-identityVideo.playheadTime); var mess:String = (secs!=1 ? props.getString('identityCountdownTextPlural') : props.getString('identityCountdownTextSingular')); identityMessage.message = mess.replace(/%/, secs);}"
		/>
	<com:SmoothImage id="identityPhoto" 
		visible="false" 
		horizontalCenter="0" 
		verticalCenter="0" 
		maxWidth="{contentContainer.width}" 
		maxHeight="{contentContainer.height}" 
		buttonMode="true"
		/>
	<com:OverlayMessage id="identityMessage"
		color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
		backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
		visible="{props.get('identityCountdown') &amp;&amp; identityVideo.visible}"
		allowClose="{props.get('identityAllowClose')}"
		close="{identityVideo.stop(); reportEvent(currentIdentityEvent=='after' ? 'postRollClose ' : 'preRollClose'); identityVideo.dispatchEvent(new Event('complete', true));}"
		/>
	<com:PlayerSubtitles id="subtitles"
		 width="{this.width}"
		 height="{this.height}"
		 x="0"
		 y="0"
		 targetVideo="{video}"
		 visible="{video.visible}"
		 design="{props.get('subtitlesDesign')}"
		 />

	<!-- Icon/Logo -->
	<mx:Box 
		id="logo" 
		visible="{(props.get('showLogo') as Boolean)}" 
		top="15" 
		right="15" 
		left="15" 
		bottom="15" 
		horizontalAlign="{props.get('logoAlign')}" 
		verticalAlign="{props.get('logoVAlign')}" 
		horizontalCenter="0" 
		verticalCenter="0"
		buttonMode="true"
		>
		<mx:Image 
			source="{props.get('logoSource')}" 
			alpha="{(props.get('logoAlpha') as Number)}" 
			maxWidth="{(props.get('logoWidth') as Number)}" 
			maxHeight="{(props.get('logoHeight') as Number)}" 
			horizontalAlign="{props.get('logoAlign')}" 
			verticalAlign="{props.get('logoVAlign')}"
			/> 
	</mx:Box>
		
	</mx:Canvas> 

	<!-- PlayList -->
	<mx:Canvas id="playListContainer" 
			   x="{tray.x}"
			   y="{tray.y - tray.height + 10}"
			   width="{Math.max(250, video.width*0.7)}"
			   backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"
			   backgroundAlpha="{(props.get('trayAlpha') as Number)}"
			   horizontalScrollPolicy="off" 
			   verticalScrollPolicy="off" 
			   visible="{tray.visible &amp;&amp; showPlayList}" 
			   hideEffect="{fadeOut}" 
			   showEffect="{fadeIn}"
			   height="{playListHolder.height}" 
			   >
		<mx:Canvas id="playListHolder" 
				   bottom="0" 
				   width="{tray.width}" 
				   verticalScrollPolicy="off" 
				   horizontalScrollPolicy="off" 
				   resize="onPlayListResize()"
				   />
	</mx:Canvas>					
	
	<!-- Tray -->
	<mx:Canvas id="tray"
	    x="{video.x}"
		y="{video.y+video.height-tray.height-20}"
		width="{Math.max(250, video.width*0.7)}"
		backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"
		backgroundAlpha="{(props.get('trayAlpha') as Number)}"
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		visible="false" 
		resize="onTrayResize();"
		hideEffect="{fadeOut}" 
		showEffect="{fadeIn}"
		mouseOver="{volumeSlider.value=video.volume; muteImage.includeTitle=unmuteImage.includeTitle=false; volumeSlider.includeInLayout=volumeSlider.visible=true}"
		mouseOut="{volumeSlider.value=video.volume; muteImage.includeTitle=unmuteImage.includeTitle=true; volumeSlider.includeInLayout=volumeSlider.visible=false}"
		>
		<mx:VBox 
			verticalGap="15"
			>
			<mx:Label id="descriptions"
			  	paddingTop="20"
			  	paddingRight="5"
			  	paddingLeft="10"
			  	fontSize="{(props.get('trayTitleFontSize') as Number) || 10}" 
			  	text="{activeElement.get('title')}" 
				color="black"
			  	truncateToFit="true" 
			  	maxWidth="{FlexGlobals.topLevelApplication.width}" 
			  	updateComplete="descriptions.visible = (descriptions.text.length>0);" 
			  	width="{tray.width - 15}"
			  	/>
			
			<mx:HBox id="videoControls" 
				horizontalGap="10"
				paddingLeft="10"
				>
				<!-- Play-->
	    		<com:PlayerButton id="playImage" 
	    			imageSource="@Embed(source='assets/buttons/play.swf')"
					title="Play"
	    			visible="{(cleanVideoState=='paused' &amp;&amp; !identityVideo.visible)}" 
	    			click="playVideoElement()"
	    			/>
	    		<com:PlayerButton id="pauseImage" 
					title="Pause"
	    			imageSource="@Embed(source='assets/buttons/pause.swf')"
	    			visible="{(cleanVideoState!='paused' &amp;&amp; !identityVideo.visible)}" 
	    			click="pauseVideoElement()"
	    			/>

				<!-- HDbutton-->
				<com:PlayerButton id="hdBtn" 
					title="Videokvalitet"
				  	imageSource="@Embed(source='assets/buttons/hd.swf')"
					visible="false"
					>
					<com:PlayerMenu 
						id="formatsMenu"
						value="{currentVideoFormat}"
						change="{switchVideoFormat(new String(formatsMenu.value));}"
						backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
						backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
						color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
						/>
				</com:PlayerButton>
				
				<!-- Subtitle button-->
				<com:PlayerButton id="subtitlesBtns"
					title="Undertekster"
					imageSource="@Embed(source='assets/buttons/cc.swf')"
					visible="false"
					>
					<com:PlayerMenu 
						id="subtitlesMenu"
						value="{subtitles.locale}"
						change="{subtitles.locale=new String(subtitlesMenu.value);}"
						backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
						backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
						color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
						/>
				</com:PlayerButton>
				
				<!-- Mute and Unmute -->
				<mx:HBox 
					height="18" 
					clipContent="true"
					paddingRight="10"
					>
					<com:PlayerButton id="muteImage" 
									  title="Volumen"
									  imageSource="@Embed(source='assets/buttons/unmute.swf')"
									  visible="{video.volume>0}" 
									  click="{volumeSlider.value=video.volume=0}"
									  />
					<com:PlayerButton id="unmuteImage" 
									  title="Volumen"
									  imageSource="@Embed(source='assets/buttons/mute.swf')"
									  visible="{video.volume==0}" 
									  click="{volumeSlider.value=video.volume=1}"
									  />
					<mx:HSlider id="volumeSlider"
							themeColor="0x000000"
							minimum="0"
							maximum="1"
							width="50"
							liveDragging="true"
							showDataTip="false"
							value="1"
							change="{video.volume = volumeSlider.value;}" 
							trackSkin="{SliderTrack}"
							sliderThumbClass="{CSpSliderThumb}"
							visible="false"
							includeInLayout="false"
							/>
				</mx:HBox>
				
				
				<!-- Fullscreen -->
				<com:PlayerButton id="fullscreenImage"
					title="Fuld skærm"
					imageSource="@Embed(source='assets/buttons/fullscreen.swf')"
					visible="{!inFullScreen}" 
					click="toggleFullScreen()"
					/>
				<com:PlayerButton id="smallscreenImage" 
					title="Almindelig visning"
					imageSource="@Embed(source='assets/buttons/fullscreen.swf')"
					visible="{inFullScreen}" 
					click="toggleFullScreen()"
					/>
				
				<!-- FeedPanel -->
				<com:PlayerButton id="feedpanelBtn" 
					  title="Del video"
					  imageSource="@Embed(source='assets/buttons/share.swf')"
					  visible="{(props.get('showShare') as Boolean)}" 
					  click="embedPanel.visible=props.get('showShare') &amp;&amp; !embedPanel.visible;"
					  />

				<!-- rate -->
				<com:PlayerButton id="rateBtn" 
					  title="{(activeElement.get('number_of_ratings')==1 ? '1 anbefaling' : activeElement.get('number_of_ratings') + ' anbefalinger')}"
					  imageSource="@Embed(source='assets/buttons/rate.swf')"
					  click="{vote();}"
					  visible="{video.width>550}"
					  />
			</mx:HBox>					
						
			<!-- Progress bar -->
			<com:PlayerProgress id="progress"
								targetVideo="{video}"
								visible="{video.visible}" 
								/>
			
		</mx:VBox>	
	</mx:Canvas>

	<!-- Embed panel -->
	<com:TextPanel id="embedPanel" 
	   	x="{video.x}"
	   	y="{video.y+video.height-embedPanel.height-20}"
	   	width="{Math.min(350, video.width-50)}"
	   	backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"
	   	backgroundAlpha="{(props.get('trayAlpha') as Number)}"
	   	horizontalScrollPolicy="off" 
	   	verticalScrollPolicy="off" 
		title="Share this video"
		show="{trayHide(); reportEvent('shareEngaged');}"
		hide="{trayShow();}"
		>

		<!-- Embed section -->		
		<mx:HBox 
			horizontalGap="5" 
			verticalAlign="middle"
			paddingTop="5"
			>
			<mx:Image 
				source="@Embed('assets/buttons/embed.swf')"
				/>
			<mx:Label 
				text="Embed:" 
				fontSize="12"
				color="#333333"
				/>
		</mx:HBox>
		<mx:HBox 
			horizontalGap="2" 
			width="100%"
			paddingBottom="10"
			>
			<mx:TextArea id="embedText" 
				paddingTop="3"
				paddingRight="3"
				paddingBottom="3"
				paddingLeft="3"
				height="24"
				width="100%"
				text="{props.get('currentVideoEmbedCode')}" 
				click="{reportEvent('embedEngaged'); embedText.setFocus(); embedText.selectionBeginIndex = 0; embedText.selectionEndIndex = embedText.text.length;}" 
				backgroundColor="white" 
				color="#333" 
				fontSize="11" 
				/>
			<com:ActionButton
				text="Kopier" 
				click="{reportEvent('embedEngaged'); System.setClipboard(embedText.text);}"
				/>
		</mx:HBox>
		
		<!-- Share section -->		
		<mx:HBox
			visible="{(props.get('showShare') as Boolean)}"
			horizontalGap="15"
			width="100%"
			>
			<mx:VBox 
				verticalGap="5"
				>
				<com:PlayerButton
					title="Del på Facebook" 
					imageSource="@Embed(source='assets/buttons/facebook.swf')"
					visible="{props.get('socialSharing') &amp;&amp; activeElement.get('link')!=''}"
					click="{goToUrl(activeElement.get('link') + '/facebook?player_id=' + props.get('player_id'))}"
					/>
				<com:PlayerButton
					title="Del på Twitter" 
					imageSource="@Embed(source='assets/buttons/twitter.swf')"
					visible="{props.get('socialSharing') &amp;&amp; activeElement.get('link')!=''}"
					click="{goToUrl(activeElement.get('link') + '/twitter?player_id=' + props.get('player_id'))}"
					/>
			</mx:VBox>
			<mx:VBox
				verticalGap="5"
				>
				<com:PlayerButton
					title="Del på e-mail" 
					imageSource="@Embed(source='assets/buttons/mail.swf')"
					visible="{props.get('mailLink')!=''}"
					click="{goToUrl(props.get('mailLink') as String)}"
					/>
				<com:PlayerButton
					title="Få som podcast" 
					imageSource="@Embed(source='assets/buttons/podcast.swf')"
					visible="{props.get('podcastLink')!=''}"
					click="{goToUrl(props.get('podcastLink') as String)}"
					/>
			</mx:VBox>
		</mx:HBox> 
	</com:TextPanel>
	<!-- /Embed panel -->

	<!-- Text panel for post-roll html identity text -->
	<com:TextPanel id="identityPanel" 
		backgroundColor="{(styleManager.getColorName(props.get('backgroundColor')) as Number)}"
		>
		<mx:TextArea id="identityPanelText"
			width="100%"
			height="{(this.height-100)*0.9}" 
			backgroundAlpha="0" 
			borderStyle="none"
			fontSize="12" 
			editable="false" 
			color="white"
			paddingTop="10" 
			paddingBottom="20"
			click="{reportEvent('callToActionClick');}"
			/>
		<mx:HBox 
			visible="{(props.get('showShare') as Boolean)}"
			width="100%"
			paddingTop="10" 
			borderColor="#666666"
			borderStyle="solid"
			borderSides="top"
			borderThickness="1"
			>
			<com:ActionButton
				text="Share this video" 
				click="embedPanel.visible=props.get('showShare') &amp;&amp; !embedPanel.visible; identityPanel.close();"
				/>
		</mx:HBox>
	</com:TextPanel> 
	<!-- / Text panel for post-roll -->
	
	<mx:Fade id="fadeOut" duration="800" alphaFrom="1.0" alphaTo="0.0"/>
	<mx:Fade id="fadeIn" duration="300" alphaFrom="0.0" alphaTo="1.0"/>
</mx:Application>
