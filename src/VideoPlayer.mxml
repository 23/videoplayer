<?xml version="1.0" encoding="utf-8"?>
<!-- 
  Squares for 23
  Benjamin Bernhard, benjamin@23company.com
  Steffen Tiedemann Christensen, steffen@23company.com
-->
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:com="com.*" 
	layout="absolute" 
	verticalScrollPolicy="off" 
	horizontalScrollPolicy="off"
	preloader="preload.CustomPreloader" 
	backgroundColor="black" 
	width="100%" 
	height="100%" 
	creationComplete="init(); resizeTray();" 
	resize="resizeTray();" 
	keyDown="trayShow()"
	>
	<mx:Style>
     @font-face {
        src:url("assets/fonts/HelveticaNeue.ttc");
        fontFamily: Helvetica;
        advancedAntiAliasing: true;
     }		
     @font-face {
        src:url("assets/fonts/HelveticaNeue.ttc");
        fontFamily: Helvetica;
        fontWeight: bold;
        advancedAntiAliasing: true;
     }		
     Application {
     	fontFamily: Helvetica;
     }
	</mx:Style>
 	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="Identity.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Script>
		<![CDATA[
			import com.PlayList;
			import com.PlayListEvent;
			import com.PlayerButton;
			import com.SmoothImage;
			import com.adobe.serialization.json.JSONParseError;
			import com.philemonworks.flex.util.HashCollection;
			
			import flash.display.StageDisplayState;
			import flash.external.ExternalInterface;
			
			import mx.controls.Alert;
			import mx.core.mx_internal;
			import mx.events.VideoEvent;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'reference.dev.visualtube.net';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';
			private var playerId:String = '0';

			private var context:Object = {};
			private var recommendations:Object = {};
			
			private var playList: PlayList;
			[Bindable] private var enablePlayList: Boolean = false;		
			[Bindable] private var showPlayList: Boolean = false;
			[Bindable] private var cleanVideoState:String = 'paused';
			
			public function init():void {
				prepareTimers();
				flash.system.Security.allowDomain('*');
				try {
					var objectID:String = new String(ExternalInterface.objectID);
					if (ExternalInterface.available && (objectID.length>0 && objectID!='null')) {
						ExternalInterface.addCallback('unloadVideoPlayer', function():void {unload();});
						ExternalInterface.addCallback('pauseVideo', function():void {pauseVideoElement();});
						ExternalInterface.addCallback('playVideo', function():void {playVideoElement();});
						ExternalInterface.addCallback('getPlayState', function():String {return(cleanVideoState);});
						ExternalInterface.addCallback('getPlayheadTime', function():Object {return(video.playheadTime + activeElement.getNumber('start'));});
						ExternalInterface.addCallback('setPlayheadTime', function(time:int):void {progress.seekVideoTo(time);});
						ExternalInterface.addCallback('getTotalTime', function():Object {return(video.totalTime);});
						ExternalInterface.addCallback('getCurrentPhotoID', function():Object {return(activeElement.get('photo_id'));});
						ExternalInterface.addCallback('getJSONSource', function():Object {return(props.get('jsonSource'));});
						ExternalInterface.addCallback('echo', function(x:Object):Object {return(x);});
					}
		        } catch (e:SecurityError) {} catch(e:Error) {}
				load();
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				try {if(video.playing) video.pause();} catch(e:Error){}
				try {if(video.playing) reportPlay('end', video.playheadTime)} catch(e:Error){}
			}
			public function load():void {
				// Are we using a specific player, or just the default? (if so, we want to specify the player id to get the correct video settings)
				var testCustomPlayer:Array = new RegExp('/([0-9]+)\.swf').exec(FlexGlobals.topLevelApplication.url);
				if (testCustomPlayer && testCustomPlayer.length>1) playerId = testCustomPlayer[1]; 
				
				// Mash up embed parameters, including .swf?..., Flashvars, width and height to get a good embed code   
				var a:Array = []; var v:String;
				for (v in FlexGlobals.topLevelApplication.parameters) {a.push(encodeURIComponent(v) + '=' + encodeURIComponent(FlexGlobals.topLevelApplication.parameters[v]));}
				a.push('width=' + encodeURIComponent(FlexGlobals.topLevelApplication.width));
				a.push('height=' + encodeURIComponent(FlexGlobals.topLevelApplication.height));
				
				// Get settings for this player from 23 Video
				doAPI('/api/player/settings', {player_id:(playerId?playerId:''), parameters:encodeURIComponent(a.join('&'))}, function(o:Object):void{
					initProperties(o.settings);
					initActiveElement();
					doJSON((props.get('jsonSource') as String), function(o:Object):void{context=o; build();});
				});
			}
			public function build():void {
				if(!context || !context.photos || context.photos.length==0) {displayError('Empty video stream...'); return;}
				video.mx_internal::videoPlayer.smoothing = true;
				identityVideo.mx_internal::videoPlayer.smoothing = true;
				setActiveElement(0, false, props.getNumber('start'));
				
				if (props.get('showTray')) tray.visible=true;
				bigPlayImage.imageContainer.horizontalCenter = 5;
				resizeTray();

 				if (props.get('showTray') && props.get('showBrowse')) {
					// Generate the recommendation playlist
					var recommendationSource:String = getRecommendationSource();
					if(recommendationSource==props.get('jsonSource')) {
						// The list displays all the items in the feed
						recommendations=context; createPlayList();
					} else {
						// The list consists of recommendations, we'll need to load them
						try {
							doJSON(recommendationSource, function(o:Object):void{recommendations=o; createPlayList();});
						} catch(e:JSONParseError) {enablePlayList = false; props.put('showShare', false);}
					}
 				}
			}			
			
            private function createPlayList():void  {
            	var arr:Array = createItemsArray(recommendations);
            	if(arr.length<=1) return;
				enablePlayList = true;
				playListHolder.removeAllChildren(); // if we've done this before, clean up after ourselves.
            	playList = new PlayList();
            	playList.width = playListContainer.width;
            	playList.verticalScrollPolicy = "off";
				playList.itemArray = arr;
				playList.addEventListener(PlayListEvent.SELECT_ITEM, function(evt:PlayListEvent):void {
						// When clicking the recommendation playlist, we shift context -- it's no longer the initially selected video, but the playlist objects
						context = recommendations;
            			if(evt.itemID>=0) {
            				playListHide();
            				setElementByID(evt.itemID, true); 
            			}
            		});
				playListHolder.addChild(playList);
				
				if(props.get('browseMode')) {
					showPlayList = true;
					trayShow();
				}
            }
			private function playListShow():void {
				if (!props.get('showTray') || !props.get('showBrowse') || !enablePlayList) return;
				showPlayList = true;
				trayShow();
            }
			private function playListHide():void {
				showPlayList = false;
				trayShow();
            }
            private function trayShow():void {
            	if(!props.get('showTray')) {tray.visible=false; return;}
            	trayTimer.reset(); trayTimer.start();
            	tray.visible = true;
            }            
            private function trayHide():void {
            	if (showPlayList) return;
            	trayTimer.stop();
            	if(props.getNumber('trayTimeout')<=0) return;
                tray.visible = false;
            }            
			private var trayTimer:Timer = new Timer(3000,1);
			private var infoTimer:Timer = new Timer(3000,1);
            private function prepareTimers():void {
            	// TRAY AND POSSIBLY PLAYLIST
            	// Hide when the timer completes
				trayTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function():void {trayHide();});
				// Reset timer when the mouse moves in the application
				FlexGlobals.topLevelApplication.addEventListener(MouseEvent.MOUSE_MOVE, function():void {trayShow();});
            	
            	// INFORMATION BOX WITH TITLE AND DESCRIPTION
            	// Hide when the timer completes
				infoTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function():void{infoHide();});
            }             
            private function infoHide():void {
            	if(props.getNumber('infoTimeout')<=0) return;
				descriptions.visible = false;
            }
            private function infoShow(timeout:Boolean=true):void {
            	if(!activeElement.get('hasInfo')) {descriptions.visible = false; return;}
				infoTimer.stop();
				descriptions.visible = true;
				if(timeout) infoTimer.start();
            }
            private function infoToggle():void {				
				if(descriptions.visible) infoHide();
				else infoShow(false); // no timeout, since this a manual action
            }
            private function onPlayListDone():void {
            	if(props.get('loop')) { 
            		load();
            	} else {
            		if (playList) {
            			playList.headline = new String(props.get('recommendationHeadline'));
            			playListShow();
            		}
            	}
            }
			private function onVideoStateChange(evt:VideoEvent):void {
				// Flex VideoDisplay shows weird stuff during seek; to avoid this,
				// we show a bitmap snapshot from the video during seek and wait for playing
				if (evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					var bmData:BitmapData = new BitmapData(video.width, video.height);  
					bmData.draw(video as DisplayObject);  
					var bm:Bitmap = new Bitmap(bmData);  
					videoShadow.source = bm;
				} else if (evt.currentTarget.state==VideoEvent.LOADING) {
					videoShadow.visible = true;
				} else if (evt.currentTarget.state==VideoEvent.PLAYING) {
					videoShadow.visible = false;
				}
				
				if(evt.currentTarget.state==VideoEvent.PLAYING || evt.currentTarget.state==VideoEvent.SEEKING) {
					cleanVideoState = 'playing';
					playListHide();
				} else if(evt.currentTarget.state==VideoEvent.LOADING || evt.currentTarget.state==VideoEvent.BUFFERING) {
					cleanVideoState = 'buffering';
					playListHide();
				} else if(evt.currentTarget.state==VideoEvent.DISCONNECTED || evt.currentTarget.state==VideoEvent.COMPLETE || evt.currentTarget.state==VideoEvent.PAUSED || evt.currentTarget.state==VideoEvent.STOPPED) {
					cleanVideoState = 'paused';
					if (identityVideo.visible==false) playListShow();
				}
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
						reportPlay('end', video.playheadTime);
						break;
                	case VideoEvent.PLAYING:
						reportPlay('start', video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
                resizeTray();
            }
            private function onVideoComplete(ignoreIdentity:Boolean=false):void {
				reportPlay('end', video.playheadTime);
     			if(!ignoreIdentity) return(handleIdentity('after', function():void {onVideoComplete(true);}));
            	if(props.get('loop')) {
            		var more:Boolean = nextElement();
            		if(!more) onPlayListDone();
            	} else {
            		onPlayListDone();
            	}
            }
            private function onPlayListResize():void {
            	var c:Array = playListHolder.getChildren();
            	if (c.length) c[0].width = playListContainer.width;
            }
            private function resizeTray():void {
            	if(tray) {
            		var before:Boolean = tray.visible;
	            	tray.visible = false;
	            	
	            	// Tray
	            	tray.width = video.width-20;
	            	// Sharing
	            	embedPanel.width = tray.width;
	            	// Progress etc
	            	progressContainer.width = tray.width-61;

	            	tray.visible = before;
	            }
            }
		]]>
	</mx:Script>	
	
	<!-- Simple element to provide a backdrop when everything else fails -->
	<mx:Box id="background" 
		backgroundColor="{(styleManager.getColorName(props.get('backgroundColor')) as Number)}" 
		width="100%" 
		height="100%" 
		verticalCenter="0" 
		horizontalCenter="0"
		/>
	<mx:Label id="errorContainer" 
		color="white"
		/>
	
	<mx:Canvas id="contentContainer"
		x="{props.getNumber('horizontalPadding')/2}"
		y="0"
		width="{FlexGlobals.topLevelApplication.width-props.getNumber('horizontalPadding')}"
		height="{FlexGlobals.topLevelApplication.height-props.getNumber('verticalPadding')}"
		>
	<!-- Image and Video -->
	<mx:VideoDisplay id="video" 
		autoRewind="false"  
		maintainAspectRatio="false"  
		autoPlay="false" 
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="2"
		width="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : contentContainer.width)}"
		height="{(contentContainer.width/contentContainer.height>activeElement.get('aspectRatio') ? contentContainer.height : contentContainer.width/(activeElement.get('aspectRatio') as Number))}"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();" 
		stateChange="onVideoStateChange(event);"
		complete="onVideoComplete();"
		resize="resizeTray();"
		/>
	<com:SmoothImage id="videoShadow" 
		horizontalCenter="0" 
		verticalCenter="0"
		width="{video.width}"
		height="{video.height}"
		includeInLayout="{videoShadow.visible}"
		/> 
	<com:SmoothImage id="image" 
		source="{activeElement.get('photoSource')}" 
		width="{video.width}" 
		height="{video.height}" 
		horizontalCenter="0" 
		verticalCenter="0"
		click="{playListHide(); playVideoElement()}" 
		/>
 
 	 <!-- Big Play -->
	<com:PlayerButton id="bigPlayImage" 
		width="64" 
		height="60"
		backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
		backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
		imageSource="@Embed(source='assets/buttons/play.swf')"
		imageWidth="34" 
		imageHeight="30"
		verticalCenter="0" 
		horizontalCenter="0" 
		visible="{((props.get('showBigPlay') as Boolean) &amp;&amp; cleanVideoState=='paused' &amp;&amp; !identityVideo.playing)}" 
		click="playVideoElement()"
		/>
 	
	<!-- Extra displays for identity video and photo -->
	<mx:VideoDisplay id="identityVideo" 
		visible="false" 
		volume="1" 
		horizontalCenter="0" 
		verticalCenter="0" 
		bufferTime="2" 
		width="{video.width}" 
		height="{video.height}"
		maintainAspectRatio="{props.get('maintainIdentityAspectRatio')}"
		buttonMode="true"
		playheadUpdate="{var secs:int=Math.round(identityVideo.totalTime-identityVideo.playheadTime); var mess:String = (secs!=1 ? props.getString('identityCountdownTextPlural') : props.getString('identityCountdownTextSingular')); identityMessage.message = mess.replace(/%/, secs);}"
		/>
	<com:SmoothImage id="identityPhoto" 
		visible="false" 
		horizontalCenter="0" 
		verticalCenter="0" 
		maxWidth="{contentContainer.width}" 
		maxHeight="{contentContainer.height}" 
		buttonMode="true"
		/>
	<com:OverlayMessage id="identityMessage"
		fontFamily="{props.get('trayFont')}" 
		color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
		backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
		visible="{props.get('identityCountdown') &amp;&amp; identityVideo.visible}"
		allowClose="{props.get('identityAllowClose')}"
		close="{identityVideo.stop(); reportEvent(currentIdentityEvent=='after' ? 'postRollClose ' : 'preRollClose'); identityVideo.dispatchEvent(new Event('complete', true));}"
		/>
	<com:PlayerSubtitles id="subtitles"
		 width="{this.width}"
		 height="{this.height}"
		 x="0"
		 y="0"
		 targetVideo="{video}"
		 visible="{video.visible}"
		 design="{props.get('subtitlesDesign')}"
		 />

	<!-- Icon/Logo -->
	<mx:Box 
		id="logo" 
		visible="{(props.get('showLogo') as Boolean)}" 
		top="15" 
		right="15" 
		left="15" 
		bottom="15" 
		horizontalAlign="{props.get('logoAlign')}" 
		verticalAlign="{props.get('logoVAlign')}" 
		horizontalCenter="0" 
		verticalCenter="0"
		buttonMode="true"
		>
		<mx:Image 
			source="{props.get('logoSource')}" 
			alpha="{(props.get('logoAlpha') as Number)}" 
			maxWidth="{(props.get('logoWidth') as Number)}" 
			maxHeight="{(props.get('logoHeight') as Number)}" 
			horizontalAlign="{props.get('logoAlign')}" 
			verticalAlign="{props.get('logoVAlign')}"
			/> 
	</mx:Box>

	<!-- Tray -->
	<mx:VBox id="tray" 
		width="{video.width-20}" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		horizontalCenter="0"
		verticalGap="1"
		visible="false"
		bottom="10"
		>

		<!-- PlayList -->
		<mx:Canvas id="playListContainer"
			height="123" 
			width="100%" 
			backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"
			backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
			visible="{showPlayList}"
			includeInLayout="{playListContainer.visible}"
			>
			<mx:Canvas id="playListHolder" 
				width="{tray.width}"
				verticalScrollPolicy="off" 
				horizontalScrollPolicy="off" 
				resize="onPlayListResize()"
				/>
		</mx:Canvas>					
		<!-- /PlayList -->

		<!-- Embed panel -->
		<mx:VBox 
			id="embedPanel" 
			width="100%" 
			horizontalGap="1" 
			height="68" 
			backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
			backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
			paddingLeft="10" 
			paddingRight="10" 
			paddingTop="5" 
			verticalGap="3" 
			horizontalScrollPolicy="off" 
			verticalScrollPolicy="off" 
			visible="false"
			includeInLayout="{embedPanel.visible}"
			show="{reportEvent('shareEngaged');}"
			>
			<mx:Text 
				text="EMBED"
				color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
				fontSize="{(props.get('trayTitleFontSize') as Number)}" 
				fontWeight="{props.get('trayTitleFontWeight')}" 
				/>
			<mx:TextArea 
				id="embedText" 
				height="21" 
				width="100%" 
				color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
				backgroundColor="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
				backgroundAlpha="0.15" 
				text="{props.get('embedCode')}" 
				click="{reportEvent('embedEngaged'); embedText.setFocus(); embedText.selectionBeginIndex = 0; embedText.selectionEndIndex = embedText.text.length;}" 
				borderStyle="none" 
				paddingTop="2" 
				paddingLeft="2" 
				fontSize="11" /> 
		</mx:VBox>
		<!-- /Embed panel -->
		
		<!-- Words panel -->
		<mx:VBox id="descriptions" 
			width="100%" 
			horizontalGap="1" 
			horizontalScrollPolicy="off" 
			verticalScrollPolicy="off" 
			visible="false"
			backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
			backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
			includeInLayout="{descriptions.visible}"
			fontFamily="{props.get('trayFont')}" 
			color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
			>
			<mx:Text id="trayContent" 
				paddingLeft="10" 
				paddingTop="5" 
				fontSize="{(props.get('trayContentFontSize') as Number)}" 
				fontWeight="{props.get('trayContentFontWeight')}" 
				color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
				htmlText="{activeElement.get('content')}" 
				truncateToFit="true" 
				maxWidth="{FlexGlobals.topLevelApplication.width}" 
				updateComplete="trayContent.visible = (trayContent.text.length>0);" 
				height="{(props.get('trayContentFontSize') as Number)*4.8}" 
				width="{descriptions.width - 15}"
				/>
		</mx:VBox>
		<!-- /Words panel -->
		
	
		<mx:VBox 
			id="videoControls"
			verticalGap="0" hide="embedPanel.visible=false;"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:HBox
				horizontalGap="1" 
				horizontalScrollPolicy="off" 
				verticalScrollPolicy="off" 
				id="controlBox">
	    		<com:PlayerButton id="playImage"
	    			width="60" height="45" 
	    			imageSource="@Embed(source='assets/buttons/play.swf')"
	    			visible="{(cleanVideoState=='paused' &amp;&amp; !identityVideo.visible)}" 
	    			click="playVideoElement()"
					backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  
					backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
	    			/>
	    		<com:PlayerButton id="pauseImage" 
	    			width="60" height="45" 
	    			imageSource="@Embed(source='assets/buttons/pause.swf')"
	    			visible="{(cleanVideoState=='playing' &amp;&amp; !identityVideo.visible)}" 
	    			click="pauseVideoElement()"
					backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  
					backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
	    			/>
	    		<com:PlayerButton id="bufferImage"  
	    			width="60" height="45" 
	    			imageSource="@Embed(source='assets/buttons/buffering.swf')"
	    			visible="{(cleanVideoState=='buffering' &amp;&amp; !identityVideo.visible)}" 
					backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  
					backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
	    			/>  


				<mx:VBox 
					id="progressContainer"
					backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"
					backgroundAlpha="{(props.get('trayAlpha') as Number)}"
					verticalGap="1"
					paddingLeft="8"
					paddingRight="8"
					horizontalScrollPolicy="off" 
					verticalScrollPolicy="off" 
					width="{video.width-61}"
					height="45"
					clipContent="false"
					>

					<mx:HBox 
						paddingTop="3"
						clipContent="false"
						height="24"
						width="100%"
						horizontalGap="0">
						<!-- Title -->
						<mx:Text 
							text="{activeElement.getString('title').toUpperCase()}"
							truncateToFit="true"
							fontSize="{(props.get('trayTitleFontSize') as Number)}" 
							fontWeight="{props.get('trayTitleFontWeight')}" 
							color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
							paddingTop="2"
							visible="{video.width-featureButtons.width>100}"
							height="17"
							includeInLayout="true"
							width="{progressContainer.width-featureButtons.width-13}"
							/>

						<mx:HBox
							id="featureButtons"
							horizontalGap="0"
							paddingTop="2"
							>

							<!-- FeedPanel -->
				    		<com:PlayerButton id="feedpanelBtn" 
				    			imageSource="@Embed(source='assets/buttons/share.swf')"
				    			visible="{(props.get('showShare') as Boolean)}" 
				    			click="embedPanel.visible=props.get('showShare') &amp;&amp; !embedPanel.visible;"
				    			/>


				    		<!-- InfoBtn -->
				    		<com:PlayerButton id="infoImage" 
				    			imageSource="@Embed(source='assets/buttons/info.swf')"
				    			visible="{(activeElement.get('hasInfo') as Boolean)}" 
				    			click="infoToggle();"
				    			/>

							<!-- HDbutton-->
							<com:PlayerButton id="hdBtn" 
							  	imageSource="@Embed(source='assets/buttons/hd.swf')"
							  	>
								<com:PlayerMenu 
									id="formatsMenu"
									value="{currentVideoFormat}"
									change="{switchVideoFormat(new String(formatsMenu.value));}"
									backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
									backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
									fontFamily="{props.get('trayFont')}" 
									color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
									/>
							</com:PlayerButton>
							
							<!-- Subtitle button-->
							<com:PlayerButton id="subtitlesBtn" 
								imageSource="@Embed(source='assets/buttons/cc.swf')"
								>
								<com:PlayerMenu 
									id="subtitlesMenu"
									value="{subtitles.locale}"
									change="{subtitles.locale=new String(subtitlesMenu.value);}"
									backgroundColor="{(styleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" 
									backgroundAlpha="{(props.get('trayAlpha') as Number)}" 
									fontFamily="{props.get('trayFont')}" 
									color="{(styleManager.getColorName(props.get('trayTextColor')) as Number)}" 
									/>
							</com:PlayerButton>

							<!-- Link -->
				    		<com:PlayerButton id="linkBtn" 
				    			imageSource="@Embed(source='assets/buttons/link.swf')"
				    			visible="{(props.get('showShare') as Boolean)}" 
				    			click="{goToUrl(activeElement.get('link') + '?player_id=' + props.get('player_id'))}"
				    			/>
							<!-- Twitter -->
				    		<com:PlayerButton id="twitterBtn" 
				    			imageSource="@Embed(source='assets/buttons/twitter.swf')"
				    			visible="{(props.get('showShare') as Boolean)}" 
				    			click="{goToUrl(activeElement.get('link') + '/twitter?player_id=' + props.get('player_id'))}"
				    			/>
							<!-- Facebook -->
				    		<com:PlayerButton id="facebookBtn" 
				    			imageSource="@Embed(source='assets/buttons/facebook.swf')"
				    			visible="{(props.get('showShare') as Boolean)}" 
				    			click="{goToUrl(activeElement.get('link') + '/facebook?player_id=' + props.get('player_id'))}"
				    			/>
							<!-- Fullscreen -->
				    		<com:PlayerButton id="fullscreenImage"
				    			imageSource="@Embed(source='assets/buttons/fullscreen.swf')"
				    			click="toggleFullScreen()"
				    			/>
				    	</mx:HBox> 
					</mx:HBox> 
						
					<!-- Progress bar -->
					<com:PlayerProgress id="progress"
						targetVideo="{video}"
						visible="{video.visible}"
						width="100%" 
						height="21"
						/>
				</mx:VBox>
			</mx:HBox>
		</mx:VBox>	
	</mx:VBox>

	<!-- Text panel for post-roll html identity text -->
	<com:TextPanel id="identityPanel" 
		backgroundColor="{(styleManager.getColorName(props.get('backgroundColor')) as Number)}"
		>
		<mx:TextArea id="identityPanelText"
			width="100%"
			height="{(this.height-100)*0.9}" 
			backgroundAlpha="0" 
			borderStyle="none"
			fontSize="12" 
			editable="false" 
			color="white"
			paddingTop="10" 
			paddingBottom="20"
			click="{reportEvent('callToActionClick');}"
			/>
		<mx:HBox 
			visible="{(props.get('showShare') as Boolean)}"
			width="100%"
			paddingTop="10" 
			borderColor="#666666"
			borderStyle="solid"
			borderSides="top"
			borderThickness="1"
			>
			<com:ActionButton
				text="Share this video" 
				iconSource="@Embed(source='assets/buttons/share.swf')"
				click="embedPanel.visible=props.get('showShare') &amp;&amp; !embedPanel.visible; identityPanel.close();"
				/>
		</mx:HBox>
	</com:TextPanel> 
	<!-- / Text panel for post-roll -->
</mx:Canvas>
</mx:Application>
