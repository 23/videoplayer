<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="init();" backgroundColor="black" xmlns:com="com.*" width="100%" height="100%"  preloader="Preloader" verticalScrollPolicy="off" horizontalScrollPolicy="off">
 	<mx:Script source="Utility.as"></mx:Script>
 	<mx:Script source="Fullscreen.as"></mx:Script>
 	<mx:Script source="AppProperties.as"></mx:Script>
 	<mx:Script source="ActiveElement.as"></mx:Script>
 	<mx:Script source="doJSON.as"></mx:Script>
	<mx:Script>
		<![CDATA[
			import mx.events.EffectEvent;
			import com.PlayListEvent;
			import com.PlayList;
			import mx.events.VideoEvent;
			import mx.controls.Alert;
			import flash.display.StageDisplayState;
			import com.philemonworks.flex.util.HashCollection;
			import mx.core.mx_internal;
			import flash.external.ExternalInterface;
			
			// Default domain (used when testing from localhost)
			private var defaultDomain:String = 'reference.dev.visualtube.net';
			// Default photo_id (used to if you want a specific photo/video to be shown, otherwise empty)
			private var defaultPhotoId:String = '';
			private var defaultAlbumId:String = '';

			private var appAspectRatio:Number = 1;
			private var context:Object = {};
			
			private var playList: PlayList;
			[Bindable] private var enablePlayList: Boolean = false;		
			[Bindable] private var showPlayList: Boolean = false;
			
			public function init():void {
				prepareTimers();
				if (ExternalInterface.available) ExternalInterface.addCallback('unload', unload);
				load();
			}
			public function unload():void {
				// This function is triggered via ExternalInterface and some JavaScript because Flex is useless.
				if(video.playing) reportPlayTime(video.playheadTime)
			}
			public function load():void {
				var domain:String = URLUtil.getServerName(Application.application.url);
				if(domain=='localhost') domain=defaultDomain;
				doJSON('http://' + domain + '/js/video-settings?raw', function(o:Object):void{
					initProperties(o.settings);
					initActiveElement();
					doJSON((props.get('jsonSource') as String), function(o:Object):void{context=o; build();});
				});
			}
			public function build():void {
				if(!context || !context.photos || context.photos.length==0) displayError('Nothing to show...');
				if(context.photos.length>1) createPlayList();
				video.mx_internal::videoPlayer.smoothing = true;
				setActiveElement(0);
			}
			
            private function createPlayList():void  {
				enablePlayList = true;
				playListHolder.removeAllChildren(); // if we've done this before, clean up after ourselves.
            	playList = new PlayList();
            	playList.width = playListContainer.width;
            	playList.verticalScrollPolicy = "off";
				playList.itemArray = createItemsArray();
				playList.addEventListener(PlayListEvent.SELECT_ITEM, function(evt:PlayListEvent):void {
            			if(evt.itemID>=0) setElementByID(evt.itemID);
            		});
				playListHolder.addChild(playList);
            }
			private function playListShow():void {
				showPlayList = true;
				trayShow(true);
            }
			private function playListHide():void {
				showPlayList = false;
				trayShow(true);
            }
            private function trayShow(forceAnimation:Boolean=false):void {
            	if(!props.get('showTray')) {tray.visible=false; return;}
            	trayTimer.reset(); trayTimer.start();
            	if(!tray.visible || forceAnimation) {
	            	tray.visible = true;
            		trayHider.end();
            		trayHider.duration = 600;
				  	trayHider.yFrom = tray.y; // from current position
			        trayHider.yTo = Application.application.height - tray.height + (showPlayList ? 0 : playListContainer.height); // ... to just inside, depending on context
			       	trayHider.play();
            	}
            }            
            private function trayHide():void {
            	trayTimer.stop();
            	if(tray.visible) {
            		trayHider.end();
            		trayHider.duration = 1000;
		           	trayHider.yFrom = tray.y; // from current position
	            	trayHider.yTo = Application.application.height; // ... to outside of frame
	            	trayHider.play();
	            	trayHider.addEventListener(EffectEvent.EFFECT_END, function():void {if(tray.y>=Application.application.height) tray.visible = false;});
            	}
            }            
			private var trayTimer:Timer = new Timer(10000,1);
			private var infoTimer:Timer = new Timer(5000,1);
            private function prepareTimers():void {
            	// TRAY AND POSSIBLY PLAYLIST
            	// Hide when the timer completes
				trayTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function():void {trayHide();});
				// Reset timer when the mouse moves in the application
				Application.application.addEventListener(MouseEvent.MOUSE_MOVE, function():void {trayShow();});
            	
            	// INFORMATION BOX WITH TITLE AND DESCRIPTION
            	// Hide when the timer completes
				infoTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function():void{infoHide();});
            }             
            private function infoHide():void {
				descriptions.visible = false;
            }
            private function infoShow(timeout:Boolean=true):void {
            	if(!activeElement.get('hasInfo')) {descriptions.visible = false; return;}
				infoTimer.stop();
				descriptions.visible = true;
				if(timeout) infoTimer.start();
            }
            private function infoToggle():void {				
				if(descriptions.visible) infoHide();
				else infoShow(false); // no timeout, since this a manual action
            }
            private function onVideoPlayHeadUpdate():void {
            	videoPlayProgress.width  = video.playheadTime/video.totalTime*videoProgress.width;
				videoTime.x = videoProgress.x + video.playheadTime/video.totalTime*videoProgress.width - videoTime.width/2;
            }
            private function onButtonMouseOver(e:Event):void {
            	e.currentTarget.setStyle('backgroundAlpha', 1);
            	e.currentTarget.getChildren()[0].alpha = 1;         	
            }
            private function onButtonMouseOut(e:Event):void {
            	e.currentTarget.setStyle('backgroundAlpha', props.get('trayAlpha'));
            	e.currentTarget.getChildren()[0].alpha = 0.7;
            }
            private function onPlayListDone():void {
            	if(props.get('loop')) load();
            }
			private function onVideoStateChange(evt:VideoEvent):void {
                switch (evt.currentTarget.state) {
                	case VideoEvent.PAUSED:
                	case VideoEvent.STOPPED:
                	case VideoEvent.COMPLETE:
                		reportPlayTime(video.playheadTime);
                		break;
                    case VideoEvent.CONNECTION_ERROR:
                        displayError('Unable to connect to video');
                        break;
                }
            }
            private function onVideoComplete():void {
            	if(props.get('loop') || props.get('autoPlay')) {
            		var more:Boolean = nextElement();
            		if(!more) onPlayListDone()
            	}
            }
            private function seekVideoTo(time:int):void {
            	if(!video.playing) playVideoElement();            	
            	if(!video.totalTime || time>video.totalTime) return;
            	var approxBufferTime:Number = video.totalTime * (video.bytesLoaded/video.bytesTotal);
            	if(time>approxBufferTime) return;
            	if(video.playing) video.playheadTime = time;
            }
		]]>
	</mx:Script>	
	
	<mx:Box id="background" backgroundColor="{(StyleManager.getColorName(props.get('backgroundColor')) as Number)}" width="100%" height="100%" verticalCenter="0" horizontalCenter="0"/>
	<mx:Label id="errorContainer" color="white"/>
	
	<!-- Image and Video -->
	<mx:VideoDisplay id="video" source="{activeElement.get('videoSource')}" autoRewind="false"  maintainAspectRatio="false"  autoPlay="false" volume="1" horizontalCenter="0" verticalCenter="0" 
		width="{(Application.application.width/Application.application.height>activeElement.get('aspectRatio') ? video.height*(activeElement.get('aspectRatio') as Number) : Application.application.width)}"
		height="{(Application.application.width/Application.application.height>activeElement.get('aspectRatio') ? Application.application.height : Application.application.width/(activeElement.get('aspectRatio') as Number))}"
		click="playListHide(); if(video.playing) pauseVideoElement(); else playVideoElement();" stateChange="onVideoStateChange(event);"
		playheadUpdate="{onVideoPlayHeadUpdate()}"
		complete="{onVideoComplete();}"
		/>
	<mx:Image id="image" source="{activeElement.get('photoSource')}" width="{video.width}" height="{video.height}" horizontalCenter="0" verticalCenter="0"	click="{playListHide(); playVideoElement()}" />

	<!-- Icon/Logo -->
	<mx:Box id="logo" visible="{(props.get('showLogo') as Boolean)}" top="15" right="15" left="15" bottom="15" horizontalAlign="{props.get('logoAlign')}" verticalAlign="{props.get('logoVAlign')}" horizontalCenter="0" verticalCenter="0">
		<mx:Image source="{props.get('logoSource')}" alpha="{(props.get('logoAlpha') as Number)}" maxWidth="{(props.get('logoWidth') as Number)}" maxHeight="{(props.get('logoHeight') as Number)}" horizontalAlign="{props.get('logoAlign')}" verticalAlign="{props.get('logoVAlign')}"/> 
	</mx:Box>

	<!-- Tray -->
	<mx:Canvas id="tray" y="{Application.application.height-tray.height+playListContainer.height}" left="0" right="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="{(props.get('showTray') as Boolean)}" horizontalCenter="0">
		<mx:VBox verticalGap="0">
			<mx:VBox id="descriptions" horizontalScrollPolicy="off" verticalScrollPolicy="off" fontAntiAliasType="advanced" fontSharpness="-300" fontFamily="{props.get('trayFont')}" color="{(StyleManager.getColorName(props.get('trayTextColor')) as Number)}" paddingLeft="2" paddingRight="2" width="{tray.width}">
				<!-- Title and Words -->
				<mx:Box id="descBg" horizontalCenter="0" verticalCenter="0" verticalGap="0" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" backgroundAlpha="{(props.get('trayAlpha') as Number)}" cornerRadius="2" borderStyle="solid" borderThickness="0" width="100%" paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6">
					<mx:Label id="trayTitle" fontSize="{(props.get('trayTitleFontSize') as Number)}" fontWeight="{props.get('trayTitleFontWeight')}" text="{activeElement.get('title')}" truncateToFit="true" maxWidth="{Application.application.width}" updateComplete="trayTitle.visible = (trayTitle.text.length>0);" width="{descBg.width - 15}"/>
					<mx:Text id="trayContent" fontSize="{(props.get('trayContentFontSize') as Number)}" fontWeight="{props.get('trayContentFontWeight')}" text="{activeElement.get('content')}" truncateToFit="true" maxWidth="{Application.application.width}" updateComplete="trayContent.visible = (trayContent.text.length>0);" height="{(props.get('trayContentFontSize') as Number)*2.6}" width="{descBg.width - 15}"/>
				</mx:Box>
			</mx:VBox>
			
			<mx:HBox id="controlBox">
				<mx:Canvas width="{tray.width}">
				
					<!-- Play and Pause --> 
					<mx:HBox visible="true" id="videoControls" bottom="2" top="2" left="2" width="{playImage.width}" resize="recalcBindPositions()">
			    		<mx:Canvas id="playImage" includeInLayout="{playImage.visible}" width="30" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			visible="{!video.playing}"  
			    			click="playVideoElement()">
			    			<mx:Image source="@Embed(source='assets/buttons/play.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="pauseImage" includeInLayout="{pauseImage.visible}" width="30" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			visible="{video.playing}"  
			    			click="pauseVideoElement()">
			    			<mx:Image source="@Embed(source='assets/buttons/pause.swf')" alpha="0.7"/>
						</mx:Canvas>
			    	</mx:HBox>					
						
					<!-- Elements for progress bar -->
					<mx:Canvas id="progressBg" visible="{videoControls.visible}" click="seekVideoTo((progressBg.contentMouseX-5)/videoProgress.width*video.totalTime);" mouseOver="videoTime.visible=true" mouseOut="videoTime.visible=false" useHandCursor="true" buttonMode="true" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}" backgroundAlpha="{(props.get('trayAlpha') as Number)}" left="{videoControls.width+4}" right="{rightPanel.width+4}" height="{playImage.height}" top="2" cornerRadius="2" borderStyle="solid" borderThickness="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<!-- VideoProgress -->
						<mx:Canvas id="videoProgress" left="5" right="5" height="6" backgroundColor="0xCCCCCC" backgroundAlpha="0.6" bottom="{(progressBg.height-6)/2}">
							<mx:Canvas id="videoBufferProgress" left="0" width="{video.bytesLoaded/video.bytesTotal*videoProgress.width}" height="6" backgroundColor="white" backgroundAlpha="0.2"></mx:Canvas>
							<mx:Canvas id="videoPlayProgress" left="0" height="6" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="0.6"></mx:Canvas>
						</mx:Canvas>					
						<!-- videoTime -->
						<mx:HBox id="videoTime" visible="false" y="{(progressBg.height-videoTime.height)/2}" backgroundColor="0xFFFFFF" cornerRadius="2" borderStyle="solid" borderColor="0xFFFFFF">
							<mx:Label selectable="false" fontGridFitType="none" fontAntiAliasType="advanced" fontSharpness="-100" text="{formatTime(video.playheadTime)}" fontFamily="Arial" fontWeight="bold" fontSize="8" height="13" color="0x000000"/>
						</mx:HBox>
					</mx:Canvas>					

					<!-- Right Panel -->
			    	<mx:HBox id="rightPanel" visible="true" bottom="2" top="2" right="2" horizontalGap="2" resize="recalcBindPositions()"> 
			    		<!-- PlayListBtn -->
			    		<mx:Canvas id="playlistBtn" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			visible="{enablePlayList &amp;&amp; showPlayList}" includeInLayout="{enablePlayList &amp;&amp; showPlayList}" 
			    			click="playListHide()">
			    			<mx:Image source="@Embed(source='assets/buttons/expand-on.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="playlistBtnOn" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{enablePlayList &amp;&amp; !showPlayList}" includeInLayout="{enablePlayList &amp;&amp; !showPlayList}" 
			    			click="playListShow()">
			    			<mx:Image source="@Embed(source='assets/buttons/expand-off.swf')" alpha="0.7"/>
						</mx:Canvas>

					    <!-- HDbutton-->
			    		<mx:Canvas id="hdBtn" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{(activeElement.get('hasHD') as Boolean) &amp;&amp; !playHD}" includeInLayout="{(activeElement.get('hasHD') as Boolean) &amp;&amp; !playHD}"
			    			click="playHD=true; setActiveElement(currentElementIndex, true)">
			    			<mx:Image source="@Embed(source='assets/buttons/hd-on.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="hdOffBtn" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{(activeElement.get('hasHD') as Boolean) &amp;&amp; playHD}" includeInLayout="{(activeElement.get('hasHD') as Boolean) &amp;&amp; playHD}"
			    			click="playHD=false; setActiveElement(currentElementIndex, true)">
			    			<mx:Image source="@Embed(source='assets/buttons/hd-off.swf')" alpha="0.7"/>
						</mx:Canvas>

			    		<!-- InfoBtn -->
			    		<mx:Canvas id="infoImage" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{(activeElement.get('hasInfo') as Boolean)}" includeInLayout="{(activeElement.get('hasInfo') as Boolean)}"
			    			click="infoToggle();">
			    			<mx:Image source="@Embed(source='assets/buttons/info.swf')" alpha="0.7"/>
						</mx:Canvas>

						<!-- Mute and Unmute -->
			    		<mx:Canvas id="muteImage" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{videoControls.visible &amp;&amp; video.volume>0}" includeInLayout="{videoControls.visible &amp;&amp; video.volume>0}"
			    			click="video.volume=0">
			    			<mx:Image source="@Embed(source='assets/buttons/mute-off.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="unmuteImage" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{videoControls.visible &amp;&amp; video.volume==0}" includeInLayout="{videoControls.visible &amp;&amp; video.volume==0}"
			    			click="video.volume=1">
			    			<mx:Image source="@Embed(source='assets/buttons/mute-on.swf')" alpha="0.7"/>
						</mx:Canvas>

						<!-- Fullscreen -->
			    		<mx:Canvas id="fullscreenImage" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{!inFullScreen}" includeInLayout="{!inFullScreen}"
			    			click="toggleFullScreen()">
			    			<mx:Image source="@Embed(source='assets/buttons/fullscreen-on.swf')" alpha="0.7"/>
						</mx:Canvas>
			    		<mx:Canvas id="smallscreenImage" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)"
			    			visible="{inFullScreen}" includeInLayout="{inFullScreen}"
			    			click="toggleFullScreen()">
			    			<mx:Image source="@Embed(source='assets/buttons/fullscreen-off.swf')" alpha="0.7"/>
						</mx:Canvas>

						<!-- FeedPanel -->
			    		<mx:Canvas id="feedpanelBtn" includeInLayout="{feedpanelBtn.visible}" width="32" height="28" backgroundColor="{(StyleManager.getColorName(props.get('trayBackgroundColor')) as Number)}"  backgroundAlpha="{(props.get('trayAlpha') as Number)}" borderStyle="solid" borderThickness="0" cornerRadius="2" mouseOver="onButtonMouseOver(event)" mouseOut="onButtonMouseOut(event)" 
			    			click="embedPanel.visible=!embedPanel.visible;">
			    			<mx:Image source="@Embed(source='assets/buttons/share.swf')" alpha="0.7"/>
						</mx:Canvas>
					</mx:HBox>
				</mx:Canvas>
			</mx:HBox>
			
			<!-- PlayList -->
			<mx:Canvas id="playListContainer" height="100" width="{tray.width}" backgroundColor="black" borderColor="black" borderSides="top" borderStyle="solid" borderThickness="5">
				<mx:Canvas id="playListHolder" bottom="0"/>
			</mx:Canvas>					
		</mx:VBox>	
	</mx:Canvas>
	<com:EmbedPanel id="embedPanel" visible="false" includeInLayout="false" verticalCenter="0" horizontalCenter="0" width="100%" height="100%" backgroundColor="black" backgroundAlpha="0.3" show="embedPanel.setEmbedWidth()"/>
	
	<mx:Move id="trayHider" duration="1500" target="{tray}"/>
</mx:Application>
