<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" resize="this.parent.height=this.height;" creationComplete="createPlayList()">
	<mx:Script>
		<![CDATA[
			import mx.effects.Move;
			import com.PlayListItem;
			
			private var _items : Array;
			
			public function set headline(value:String):void {playlistHeadline.text = value;}

			public function set itemArray(value : Array) : void
			{
				_items = value;
			}
			
            
			private function scrollBack() : void
			{
				if(playListBox.width > playListCanvas.width)
				{
					mover.end();
					mover.xTo = mover.target.x+(playListCanvas.width*.6);
					if(mover.xTo > 0)
					{
						mover.xTo = 0;
						mover.play();
					}
					else
					{
						mover.play();
					}
				}
				
			}
			
			private function scrollForward() : void
			{
				if(playListBox.width > playListCanvas.width)
				{
					mover.end();
					mover.xTo = mover.target.x-(playListCanvas.width*.6);
					if(mover.xTo < (playListCanvas.width - playListBox.width))
					{
						mover.xTo = playListCanvas.width - playListBox.width;
						mover.play();
					}
					else
					{
						mover.play();
					}
				}
				dispatchEvent(new PlayListEvent(-1));
			}
			
			private function createPlayList() : void
			{
				if(_items != null)
				{
					for(var i:Number = 0; i<_items.length; i++)
					{
						var playlistElement : PlayListItem = new PlayListItem();
						playlistElement.itemID = _items[i].itemID;
						playlistElement.movieName = _items[i].title;
						playlistElement.sourceURL = _items[i].photoSource;
						playlistElement.width = 100;
						playlistElement.height = 100;
						playlistElement.verticalScrollPolicy = "off";
						playlistElement.horizontalScrollPolicy = "off";
						playListBox.addChild(playlistElement);
						playlistElement.addEventListener(MouseEvent.CLICK , selectHandler);
					}
				}
			}
			
			private function selectHandler(evt:MouseEvent) : void
			{
				dispatchEvent(new PlayListEvent(evt.target.parent.itemID));
			}
			
		]]>
	</mx:Script>
	<mx:Label id="playlistHeadline" paddingTop="15" paddingLeft="25" text="" visible="{playlistHeadline.text!=''}" includeInLayout="{playlistHeadline.visible}" 
		fontFamily="{this.parentApplication.props.get('trayFont')}" color="{(styleManager.getColorName(this.parentApplication.props.get('trayTextColor')) as Number)}" 
		fontSize="{(this.parentApplication.props.get('trayTitleFontSize') as Number) || 10}" fontWeight="{this.parentApplication.props.get('trayTitleFontWeight')}" truncateToFit="true"/>
	
	<mx:Canvas width="100%" height="100">
		<mx:Canvas id="previousBtn" click="{scrollBack()}" width="25" backgroundImage="@Embed('assets/buttons/prev.png')" top="0" left="0" bottom="0" alpha="0.7" mouseOver="previousBtn.alpha=1;" mouseOut="previousBtn.alpha=0.7;"/>
		<mx:Canvas verticalCenter="0" verticalScrollPolicy="off" horizontalScrollPolicy="off" left="{previousBtn.width+5}" right="{nextBtn.width+5}" id="playListCanvas">
			<mx:HBox id="playListBox" verticalScrollPolicy="off" verticalCenter="0"/>
		</mx:Canvas>
		<mx:Canvas id="nextBtn" click="{scrollForward()}" width="25" backgroundImage="@Embed('assets/buttons/next.png')" top="0" right="0" bottom="0" alpha="0.7" mouseOver="nextBtn.alpha=1;" mouseOut="nextBtn.alpha=0.7;"/>
	</mx:Canvas>
	<mx:Move id="mover" target="{playListBox}"/>
</mx:VBox>
