<?xml version="1.0" encoding="utf-8"?>                                                                                                                                    
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off"
	useHandCursor="true" 
	buttonMode="true" 
	height="33"
	top="2" 
	click="seekVideoTo((this.contentMouseX-5)/videoProgress.width*_targetVideo.totalTime);" 
	>
	<!-- VideoProgress -->
	<mx:Canvas id="videoProgress" 
		top="9" 
		left="10" 
		right="10" 
		height="9" 
		borderColor="#999999" 
		borderStyle="solid" 
		borderThickness="1" 
	 	>
		<mx:Canvas id="videoBufferProgress" 
			left="0" 
			height="7" 
			backgroundColor="#DDDDDD" 
			/>
		<mx:Canvas id="videoPlayProgress" 
			left="0" 
			height="7" 
			backgroundColor="#999999" 
			/>
	</mx:Canvas>					

	<mx:Image id="progressHandle"
		x="{videoPlayProgress.width+10}"
		y="7"
		source="@Embed(source='assets/buttons/progress-handle.swf')"
		/>

	<!-- videoTime -->
	<mx:HBox id="videoTime" 
		right="10" 
		bottom="0"
		>
		<mx:Label id="videoTimeLabel" 
			selectable="false" 
			fontFamily="Helvetica, Arial" 
			fontSize="9" 
			height="12" 
			color="#333333"
			/>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import mx.events.VideoEvent;
			import mx.controls.VideoDisplay;

			// Import props hash array from main application 
			import mx.core.Application;
			import com.philemonworks.flex.util.HashCollection;
			[bindable] private var props:HashCollection = mx.core.Application.application.props;
			
			// Component-specific functions and event-handlers
			private function formatTime(time:int):String {return(Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString());}
            private function seekVideoTo(time:int):void {
            	if(!_targetVideo) return;
            	if(!_targetVideo.totalTime || time>_targetVideo.totalTime) return;
            	var approxBufferTime:Number = _targetVideo.totalTime * (_targetVideo.bytesLoaded/_targetVideo.bytesTotal);
            	if(time>approxBufferTime) return;
            	_targetVideo.playheadTime = time;
            	if(!_targetVideo.playing) _targetVideo.play();            	
            }
            private function updateBuffer(e:Event):void {
            	if(!_targetVideo) return;
            	videoBufferProgress.width = _targetVideo.bytesLoaded/_targetVideo.bytesTotal*videoProgress.width;
            }
            private function updatePlay(e:Event):void {
            	if(!_targetVideo) return;
            	videoPlayProgress.width  = _targetVideo.playheadTime/_targetVideo.totalTime*videoProgress.width;
				videoTimeLabel.text = formatTime(_targetVideo.playheadTime);
            }
            
			// Which video display are we binding to? (and attach to events)
			private var _targetVideo:VideoDisplay;
			public function set targetVideo(v:VideoDisplay):void {
				_targetVideo = v;
				v.addEventListener(VideoEvent.PLAYHEAD_UPDATE, updatePlay);
				v.addEventListener(ProgressEvent.PROGRESS, updateBuffer);
			}
			public function get targetVideo():VideoDisplay {return(_targetVideo);}
		]]>
	</mx:Script>	
</mx:Canvas>
