<?xml version="1.0" encoding="utf-8"?>                                                                                                                                    
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off" 
	verticalScrollPolicy="off"
	useHandCursor="true" 
	buttonMode="true" 
	height="12"
	click="seekVideoTo((this.contentMouseX-5)/videoProgress.width*activeElement.getNumber('length'));" 
	>
	<!-- VideoProgress -->
	<mx:Canvas id="videoProgress" 
		top="1" 
		left="0" 
		height="10"
		right="{videoTime.width+4}"
		backgroundImage="@Embed(source='assets/buttons/progress-background.swf')" 
		>
		<mx:Canvas id="videoBufferProgress" 
			x="0" 
			height="10" 
			backgroundImage="@Embed(source='assets/buttons/progress-played.swf')" 
			backgroundAlpha="0.2"
			/>
		<mx:Canvas id="videoPlayProgress" 
			x="0"
			height="10" 
			backgroundImage="@Embed(source='assets/buttons/progress-played.swf')" 
			/>
	</mx:Canvas>					

	<!-- videoTime -->
	<mx:HBox id="videoTime" 
		right="0"
		y="-2" 
		>
		<mx:Label id="videoTimeLabel" 
			selectable="false"
			fontFamily="Helvetica, Arial" 
			fontSize="10" 
			height="15" 
			color="white"
			/>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import mx.events.VideoEvent;
			import mx.controls.VideoDisplay;

			// Import props hash array from main application 
			import mx.core.Application;
			import com.philemonworks.flex.util.HashCollection;
			[bindable] private var props:HashCollection = mx.core.Application.application.props;
			[bindable] private var activeElement:HashCollection = mx.core.Application.application.activeElement;
			
			// Component-specific functions and event-handlers
			private function formatTime(time:int, totalTime:int = -1, join:String = ' / '):String {
				if (time<0) return("");
				if (totalTime>=0) {
					return(Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString() + join + Math.floor(totalTime/60).toString() +':'+ (totalTime%60<10?'0':'') + Math.round(totalTime%60).toString());
				} else {
					return(Math.floor(time/60).toString() +':'+ (time%60<10?'0':'') + Math.round(time%60).toString());
				}
			}
            private function seekVideoTo(time:int):void {
            	if(!_targetVideo) return;
            	if(time>activeElement.getNumber('length')) return;
            	var approxBufferTime:Number = (_targetVideo.totalTime * (_targetVideo.bytesLoaded/_targetVideo.bytesTotal)) + activeElement.getNumber('start');
            	if(time>new Number(activeElement.get('start')) && time<approxBufferTime) {
            		_targetVideo.playheadTime = time-activeElement.getNumber('start');
            		if(!_targetVideo.playing) _targetVideo.play();
            	} else {
            		if ((props.get('streaming') as Boolean)) {
            			activeElement.put('start', time);
            			activeElement.put('skip', '1');
            			_targetVideo.stop();
            			_targetVideo.source = getFullVideoSource();
            			_targetVideo.play();
            		}
            	}
            }
            private function updateBuffer(e:Event):void {
            	if(!_targetVideo) return;
            	videoBufferProgress.x = activeElement.getNumber('start') / activeElement.getNumber('length') * videoProgress.width;
            	videoBufferProgress.width = _targetVideo.bytesLoaded/_targetVideo.bytesTotal*(videoProgress.width-videoBufferProgress.x);
            }
            private function updatePlay(e:Event):void {
            	if(!_targetVideo) return;
				videoPlayProgress.x = activeElement.getNumber('start') / activeElement.getNumber('length') * videoProgress.width;
				videoPlayProgress.width  = _targetVideo.playheadTime/_targetVideo.totalTime*(videoProgress.width-videoPlayProgress.x);
				videoTimeLabel.text = formatTime(_targetVideo.playheadTime + activeElement.getNumber('start'), activeElement.getNumber('length'));
            }

			private function getFullVideoSource():String {
				return(activeElement.getString('videoSource') + '?start=' + encodeURIComponent(activeElement.getString('start')) + '&skip=' + encodeURIComponent(activeElement.getString('skip')));
			}            
            
			// Which video display are we binding to? (and attach to events)
			private var _targetVideo:VideoDisplay;
			public function set targetVideo(v:VideoDisplay):void {
				_targetVideo = v;
				v.addEventListener(VideoEvent.PLAYHEAD_UPDATE, updatePlay);
				v.addEventListener(ProgressEvent.PROGRESS, updateBuffer);
			}
			public function get targetVideo():VideoDisplay {return(_targetVideo);}
		]]>
	</mx:Script>	
</mx:Canvas>
